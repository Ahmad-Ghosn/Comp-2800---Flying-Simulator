#A few tweaks to be made but basically finished - Komal
#Also need to add camera control, so being able to look around as the plane moves.
package codesKS280;
import org.jogamp.java3d.loaders.Scene;

import java.awt.Font;

import org.jogamp.java3d.*;
import org.jogamp.java3d.loaders.IncorrectFormatException;
import org.jogamp.java3d.loaders.ParsingErrorException;
import org.jogamp.java3d.loaders.objectfile.ObjectFile;
import org.jogamp.java3d.utils.geometry.*;
import org.jogamp.java3d.utils.image.TextureLoader;
import org.jogamp.vecmath.*;

import java.awt.BorderLayout;
import java.awt.GraphicsConfiguration;
import java.io.FileNotFoundException;

import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jogamp.java3d.*;
import org.jogamp.java3d.utils.universe.SimpleUniverse;
import org.jogamp.vecmath.*;

public class Assignment1KS extends JPanel {
    
    private static final long serialVersionUID = 1L;
	private static JFrame frame;

    
    public Assignment1KS(BranchGroup sceneBG) {
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D canvas = new Canvas3D(config);
        
        SimpleUniverse su = new SimpleUniverse(canvas);    // create SimpleUniverse
        CommonsKS.define_Viewer(su, new Point3d(-1.0d, 0.1d, 1.0d));
        
        sceneBG.addChild(CommonsKS.key_Navigation(su));
        sceneBG.compile();		                          
        su.addBranchGraph(sceneBG);                        // attach to SimpleUniverse
    
        setLayout(new BorderLayout());
        add("Center", canvas);
        frame.setSize(800, 800);                        
        frame.setVisible(true);
    }
    
    public static BranchGroup create_Scene() {
        BranchGroup sceneBG = new BranchGroup();
        TransformGroup sceneTG = new TransformGroup();
        TransformGroup baseTG;
        
        Transform3D baseTrans = new Transform3D();
        baseTrans.setTranslation(new Vector3f(0, -1.1f, 0));
        baseTrans.setScale(new Vector3d(1, 1, 0.25f));
        baseTG = new TransformGroup(baseTrans);
        
        sceneTG.addChild(createBG("src/codesKS280/Sky.jpg"));
        sceneTG.addChild(load_Shape());
        sceneTG.addChild(baseTG);

        

        
        TransformGroup[] cylinderTG = new TransformGroup[4];
        for (int i = 0; i < 4; i++) {
            Transform3D cylinderTrans = new Transform3D();
            cylinderTrans.setTranslation(new Vector3f(0.5f * (i >= 2 ? -1 : 1), 0, 0.5f * ((i == 1 || i == 2) ? 1 : -1)));
            cylinderTG[i] = new TransformGroup(cylinderTrans);
            baseTG.addChild(cylinderTG[i]);
        }
        
        sceneBG.addChild(CommonsKS.add_Lights(CommonsKS.White, 1));    
        sceneBG.addChild(CommonsKS.rotate_Behavior(0, sceneTG));        // rotation speed changing
        sceneBG.addChild(sceneTG);
        sceneBG.addChild(new AxisShape3(1).position_Object());
        
        return sceneBG;
    }

    
    private static BranchGroup load_Shape() {
        int flags = ObjectFile.RESIZE | ObjectFile.TRIANGULATE | ObjectFile.STRIPIFY;
        ObjectFile f = new ObjectFile(flags, (float) (60 * Math.PI / 180.0));
        Scene s = null;
        try {
            s = f.load("src\\codesKS280\\3.obj");
            Appearance app = new Appearance();
            app.setTexture(texturedApp("city"));
            
        } catch (FileNotFoundException e) {
            System.err.println(e);
            System.exit(1);
        } catch(ParsingErrorException e) {
            System.err.println(e);
            System.exit(1);
        } catch (IncorrectFormatException e) {
            System.err.println(e);
            System.exit(1);
        }
        
        return s.getSceneGroup();
    }

   
    private static Background createBG(String filename) {
        Background bg = new Background();                                                               // create background
        bg.setImage(new TextureLoader(filename, null).getImage());                                      // add image
        bg.setImageScaleMode(Background.SCALE_FIT_MAX);                                                 // scale to fit screen
        bg.setApplicationBounds(new BoundingSphere(new Point3d(0, 0, 0), Double.MAX_VALUE));            // set bounding sphere as big as possible
        return bg;
    }
    
    public static Texture texturedApp(String name) {
    	String filename = "src\\codesKS280\\" + name + ".jpg";
    	TextureLoader loader = new TextureLoader(filename, null);
    	ImageComponent2D image = loader.getImage();
    	if (image == null)
    	System.out.println("Cannot load file: " + filename);
    	Texture2D texture = new Texture2D(Texture.BASE_LEVEL, 
    	Texture.RGBA, image.getWidth(), image.getHeight());
    	texture.setImage(0, image);
    	return texture;
    	}
    
    public static void main(String[] args) {
        frame = new JFrame("Project");                   // NOTE: change XY to student's initials
		frame.getContentPane().add(new Assignment1KS(create_Scene()));  // create an instance of the class
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	
		
	}
}

class AxisShape3 {
    float length;
    public AxisShape3(float n) { // constructor to set length of axis
        length = n;
    }
	protected Node create_Object() {
		Point3f coor[] = new Point3f[4]; //4 points
		LineArray lineArr = new LineArray(6, LineArray.COLOR_3 | LineArray.COORDINATES); 
		
		coor[0] = new Point3f(0, 0, 0); //We are just setting the x, y, and z coordinates respectively.
		coor[1] = new Point3f(length, 0, 0); 
		coor[2] = new Point3f(0, length, 0); 
		coor[3] = new Point3f(0, 0, length); 
		
		lineArr.setColor(0, CommonsKS.Blue); //Setting Colors
		lineArr.setColor(1, CommonsKS.Blue); 
		
		lineArr.setCoordinate(0, coor[0]); //Axis lines 
		lineArr.setCoordinate(1, coor[1]);
		
		lineArr.setColor(2, CommonsKS.Orange); 
		lineArr.setColor(3, CommonsKS.Orange);
		
		lineArr.setCoordinate(2, coor[0]);       
		lineArr.setCoordinate(3, coor[2]);
		
		lineArr.setColor(4, CommonsKS.Green); 
		lineArr.setColor(5, CommonsKS.Green);
		
        lineArr.setCoordinate(4, coor[0]);       
        lineArr.setCoordinate(5, coor[3]);
		return new Shape3D(lineArr);  
	}
	public Node position_Object() {
		return create_Object();
	}
}

class StringShape3 {
	private TransformGroup objTG;                              // use 'objTG' to position an object
	private String str;
	public StringShape3(String str_ltrs) {
		str = str_ltrs;		
		Transform3D scaler = new Transform3D();
		scaler.rotY(Math.PI);								// flip string
		scaler.setScale(0.15);                              // scaling 4x4 matrix 
		objTG = new TransformGroup(scaler);
		objTG.addChild(create_Object());		   // apply scaling to change the string's size
	}
	protected Node create_Object() {
		Font my2DFont = new Font("Arial", Font.PLAIN, 1);  // font's name, style, size
		FontExtrusion myExtrude = new FontExtrusion();
		Font3D font3D = new Font3D(my2DFont, myExtrude);		

		Point3f pos = new Point3f(-str.length()/4f, -7.7f, 1.5f);// position for the string 
		Text3D text3D = new Text3D(font3D, str, pos);      // create a text3D object
		return new Shape3D(text3D, CommonsKS.obj_Appearance(CommonsKS.Blue)); // using blue as color
	}
	public Node position_Object() {
		return objTG;
	}
}
